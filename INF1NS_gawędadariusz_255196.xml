<?xml version="1.0" encoding="UTF-8" standalone="yes"?><danepracy><studiauczelnia>Uniwersytet Gdański</studiauczelnia><studiawydzial>Wydział Matematyki, Fizyki i Informatyki</studiawydzial><studiakierunek>Informatyka</studiakierunek><studiatryb>niestacjonarne zaoczne</studiatryb><studentimie>Dariusz</studentimie><studentnazwisko>Gawęda</studentnazwisko><studentalbum>255196</studentalbum><pracaopiekun>dr inż. Arkadiusz Mirakowski</pracaopiekun><pracaprowadzacy>dr inż. Arkadiusz Mirakowski</pracaprowadzacy><pracatytul>Możliwości i zagrożenia wynikające  z automatyzacji ludzkich zachowań w mediach  społecznościowych</pracatytul><pracarok>2021</pracarok><pracadatazlozenia>23-06-2021</pracadatazlozenia><pracastreszczenie>Celem niniejszej pracy dyplomowej było przedstawienie możliwości i zagrożeń wynikających z automatyzacji ludzkich zachowań w mediach społecznościowych. W tym celu stworzyliśmy social media bota dla serwisu Instagram. Aplikacja została napisana przy użyciu języka python3 wraz z frameworkiem django i operuje w głównej mierze na narzędziu InstaPy. Do roli systemu zarządzania bazą danych użyto MongoDB.&#xD;
&#xD;
Aplikacja imituje zachowania normalnego użytkownika w serwisie Instagram zdobywając dla nas popularność poprzez charakterystyczne dla tego serwisu aktywności jak: polubienie postów, komentowanie postów, obserwacja użytkowników.&#xD;
				&#xD;
W części teoretycznej przedstawiliśmy zarówno pozytywne jak i negatywne strony używania wszelkiego rodzaju automatycznego oprogramowania, w celu zbliżenia tematyki używania botów na świecie.										&#xD;
&#xD;
Projekt systemu opisuje funkcje autorskiej aplikacji IMAM – IntelligentMediaAutoManager poprzez diagram przypadków użycia oraz wygląd interfejsu użytkownika przez załączone rysunki.&#xD;
								&#xD;
W części poświęconej implementacji przedstawiono kolejne etapy działania aplikacji, zaczynając od przedstawienia i opisania użytych technologii. Opisano sposób działania wszelkich funkcjonalności aplikacji w oparciu o narzędzie InstaPy (opartego na frameworku Selenium) oraz sposób komunikacji od strony serwera i użytkownika, czyli warstwy logiki, i warstwy prezentacji. Warstwa frontend stworzona za pomocą HTML5, CSS, jQuery  oraz JavaScript zapewnia kompleksową obsługę żądań użytkownika przez walidacje danych formularza, przez co serwer obsługuje jedynie poprawnie przekazane ustawienia bota. Omówiono sposób działania nierelacyjnego silnika bazodanowego MongoDB oraz powód jego użycia.&#xD;
													W części poświęconej testom przedstawiliśmy ogólne sposoby i zasady testowania aplikacji. Omówiono sposób testowania naszej aplikacji poprzez testy jednostkowe przy użyciu biblioteki unittest oraz testy integracyjne za pomocą dockera.&#xD;
				&#xD;
W zakończeniu  podsumowaliśmy doświadczenia zgromadzone podczas tworzenia projektu.</pracastreszczenie><pracaslowakluczowe>instaPy, bot, IMAM, Selenium, python3, django, MongoDB, jQuery, frontend, backend, unittest</pracaslowakluczowe><pracaspistresci>Wykaz pojęć	3&#xD;
Wstęp	4&#xD;
1. Opis problemu	6&#xD;
1.1 Znaczenie internetowego bota	6&#xD;
1.2 Rodzaje automatycznego oprogramowania oraz ich możliwości	6&#xD;
1.3 Social Media Bot	7&#xD;
1.4 Popularność w mediach	7&#xD;
1.5 Oszczędność czasu dzięki automatyzacji	7&#xD;
1.6 Zdobywanie popularności przez oprogramowanie vs przez człowieka	8&#xD;
1.6.1 Eksperyment	9&#xD;
1.7 Boty w grach MMO	10&#xD;
1.8 Wpływy i walory używania automatyzacji w sieci Instagram	10&#xD;
1.8.1 Generowanie ruchu w sieci	10&#xD;
1.8.2 Ile zarabia influencer na Instagramie?	11&#xD;
1.8.3 Metody zdobywania popularności	12&#xD;
1.9 Koncepcja	14&#xD;
2. Projekt Systemu	15&#xD;
2.1. Diagram Przypadków Użycia	15&#xD;
3. Implementacja	19&#xD;
3.1 Architektura rozwiązania	19&#xD;
3.2 Strona startowa	19&#xD;
3.2.1 Walidacja	20&#xD;
3.2.2 Komunikacja user - server	21&#xD;
3.2.3 Uruchomienie IMAM	23&#xD;
3.3 Komentarze	24&#xD;
3.4 Selenium	26&#xD;
3.5 InstaPy	26&#xD;
3.6 Funkcjonalności bota w serwisie Instagram	26&#xD;
3.6.1 Like By Tags	26&#xD;
3.6.2 Following	28&#xD;
3.7 Exit	29&#xD;
3.8 Bazy Danych – SQL i NOSQL	30&#xD;
3.8.3 MongoDb	31&#xD;
3.8.4 Sposób działania	33&#xD;
3.8.5 Inicjalizacja bazy	35&#xD;
4.Testy	37&#xD;
4.1 Testy Automatyczne	37&#xD;
4.2 Testy manualne	37&#xD;
4.3 Po co nam testy?	37&#xD;
4.4 Metodyki pisania testów	38&#xD;
4.5 Testy Jednostkowe - unittest	38&#xD;
4.6 Testy Integracyjne - docker	39&#xD;
4.7 Scenariusze testowe	40&#xD;
Zakończenie	41&#xD;
Podział Pracy	42&#xD;
Bibliografia	43&#xD;
Spis listingów	45&#xD;
Spis rysunków	46&#xD;
Spis tabel	47</pracaspistresci></danepracy>